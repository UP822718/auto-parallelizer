#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double lf;
#define TAM       1000123
#define LOG2      20

struct RMQ {
  int dp[TAM][LOG2];

  int getMin ( int a, int b ) {
    int p2 = 31 - __builtin_clz ( b-a+1 );
    return min ( dp[a][p2], dp[b-(1<<p2)+1][p2] );
  }

  void init ( int* a, int n ) {
    for ( int i = 0; i < n; ++i )
      dp[i][0] = a[i];
    for ( int j = 0; j+1 < LOG2; ++j )
      for ( int i = 0; i+(1<<j) < n; ++i )
        dp[i][j+1] = min ( dp[i][j], dp[i+(1<<j)][j] );
  }
};

RMQ rmn, rmx;

int n, k, mx[TAM], mn[TAM];
int score[TAM];

int calcP ( int i, int j ) {
  return min ( -rmx.getMin ( i, j ), rmn.getMin ( i, j ) );
}

lf getProb ( int i ) {
  lf r = 1;
  for ( int j = k-2; j >= 0; --j ) {
    r *= lf(n-i-1-j) / lf(n-j);
  }
  r *= lf(k) / lf(n-(k-1));
  return r;
}

int main ( )
{
  scanf ( "%d%d", &n, &k );
  for ( int i = 0; i < n; ++i ) {
    scanf ( "%d", &mx[i] );
    mx[i] *= -100;
  }
  for ( int i = 0; i < n; ++i )
    scanf ( "%d", &mn[i] );
  rmx.init ( mx, n );
  rmn.init ( mn, n );

  for ( int i = 0; i < n; ++i ) {

    int lo = i, hi = n-1, mi;
    while ( lo < hi ) {
      mi = ( lo + hi ) / 2;
      const int maxIJ = -rmx.getMin ( i, mi );
      const int minIJ = rmn.getMin ( i, mi );
      if ( maxIJ < minIJ ) lo = mi+1;
      else hi = mi;
    }

    score[i] = calcP ( i, lo );
    if ( lo > i ) score[i] = max ( score[i], calcP ( i, lo-1 ) );

    hi = n-1;
    while ( lo < hi ) {
      mi = ( lo + hi ) / 2;
      const int maxIJ = -rmx.getMin ( i, mi );
      const int minIJ = rmn.getMin ( i, mi );
      if ( maxIJ <= minIJ ) lo = mi+1;
      else hi = mi;
    }

    score[i] = max ( score[i], calcP ( i, lo ) );
  }

  sort ( score, score+n );
  lf ans = 0;
  lf curProb = getProb(0);
  for ( int i = 0; i < n; ++i ) {
    ans += curProb * lf( score[i] );
    if ( i+1 < n ) {
      curProb /= lf(n-i-1);
      curProb *= lf(n-i-k);
    }
  }

  printf ( "%.10lf\n", double(ans) );
  return 0;
}