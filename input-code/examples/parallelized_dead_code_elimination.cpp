/**
* Generated by Auto Parallelizer
*
* Auto Parallelizer supports Task parallelization and reduction recognition
* in for statements
*
* For further information see the -help of the executable file or 
* the source code at https://github.com/milderhc/auto-parallelizer
*
* Developed by:
* Milder Hernandez Cagua
* Daniel Augusto Caceres Salas
*
* Universidad Nacional de Colombia
* May 2017
*
*/

#include <omp.h>
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int MAXN = 1024;
const int MOD = int(1e9)+7;
int n;
int c[ MAXN ];
int d[ MAXN ];
int add( int a, int b ) {
	int r = a+b;
	if( r >= MOD ) return r-MOD;
	return r;
}
int sub( int a, int b ) {
	int r = a-b;
	if( r < 0 ) return r+MOD;
	return r;
}
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> n;
	for( int i = 1; i <= n; ++i)
	    cin >> c[i];
	for( int i = 1; i <= n; ++i ) {
	    d[ i ] = add( d[ i-1 ], d[ i-1 ] );
	    d[ i ] = add( d[ i ], 2 );
	    d[ i ] = sub( d[ i ], d[ c[i]-1 ] );
	  }
	cout << d[ n ] << '\n';
}
